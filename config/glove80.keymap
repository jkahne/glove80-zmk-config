/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>

#define HYPER LC(LS(LG(LALT)))

// layers

#define DEFAULT 0
#define LOWER 1
#define MAGIC 2
#define FACTORY_TEST 3

/ {
    behaviors {
        // For the "layer" key, it'd nice to be able to use it as either a shift or a toggle.
        // Configure it as a tap dance, so the first tap (or hold) is a &mo and the second tap is a &to

        layer_td: tap_dance_0 {
            compatible = "zmk,behavior-tap-dance";
            label = "LAYER_TAP_DANCE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mo 1>, <&to 1>;
        };

        magic: magic_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "MAGIC_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            bindings = <&mo>, <&rgb_ug_status_macro>;
        };

        hm: hm {
            compatible = "zmk,behavior-hold-tap";
            label = "HM";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
        };
    };

    macros {
        rgb_ug_status_macro: rgb_ug_status_macro_0 {
            label = "RGB_UG_STATUS";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&rgb_ug RGB_STATUS>;
        };

        bt_0: bt_profile_macro_0 {
            label = "BT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 0>;
        };

        bt_1: bt_profile_macro_1 {
            label = "BT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 1>;
        };

        bt_2: bt_profile_macro_2 {
            label = "BT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 2>;
        };

        bt_3: bt_profile_macro_3 {
            label = "BT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 3>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // ---------------------------------------------------------------------------------------------------------------------------------
            // |  F1   |  F2 |  F3 |  F4  |  F5  |                                                               |  F6   |  F7   |  F8  |   F9  |  F10 |
            // |  =    |  1  |  2  |  3   |  4   |  5   |                                                 |  6   |   7   |   8   |  9   |   0   |   -  |
            // |  TAB  |  Q  |  W  |  E   |  R   |  T   |                                                 |  Y   |   U   |   I   |  O   |   P   |   \  |
            // |  ESC  |  A  |  S  |  D   |  F   |  G   |                                                 |  H   |   J   |   K   |  L   |   ;   |   '  |
            // |   `   |  Z  |  X  |  C   |  V   |  B   | LSHFT | LCTRL | LOWER | | LGUI  | RCTRL | RSHFT |  N   |   M   |   ,   |  .   |   /   | PGUP |
            // | MAGIC | HOME| END | LEFT | RIGHT|      | BSPC  | DEL   | LALT  | | RALT  | RET   | SPACE |      |  UP   | DOWN  |  [   |   ]   | PGDN |

            bindings = <
&kp F1      &kp F2    &kp F3     &kp F4          &kp F5                                                                                                     &kp F6           &kp F7                 &kp F8                   &kp F9               &kp F10
&kp ESCAPE  &kp N1    &kp N2     &kp N3          &kp N4           &kp N5                                                                            &kp N6  &kp N7           &kp N8                 &kp N9                   &kp N0               &kp BACKSPACE
&kp TAB     &kp Q     &kp W      &kp E           &kp R            &kp T                                                                             &kp Y   &kp U            &kp I                  &kp O                    &kp P                &kp BSLH
&kp LCTRL   &kp A     &kp S      &kp D           &kp F            &kp G                                                                             &kp H   &kp J            &kp K                  &kp L                    &kp SEMI             &kp SQT
&mo 2       &kp Z     &kp X      &kp C           &kp V            &kp B   &kp ENTER  &kp LCTRL  &kp BACKSPACE    &none        &none      &kp RCTRL  &kp N   &kp M            &kp COMMA              &kp DOT                  &kp FSLH             &mo 2
&magic 3 0  &kp LALT  &kp LCTRL  &hm LGUI GRAVE  &hm LSHFT EQUAL          &kp LGUI   &kp LSHFT  &lt 1 BACKSPACE  &lt 1 ENTER  &kp RSHFT  &kp SPACE          &hm RSHFT MINUS  &hm RGUI LEFT_BRACKET  &hm RCTRL RIGHT_BRACKET  &hm RALT LEFT_ARROW  &kp GLOBE
            >;
        };

        numbers_and_directions {
            bindings = <
&kp C_BRI_DN  &kp C_BRI_UP  &kp C_PREV  &kp C_NEXT  &kp C_PP                                                                          &kp C_MUTE  &kp C_VOL_DN  &kp C_VOL_UP   &none             &kp PAUSE_BREAK
&trans        &none         &none       &none       &none      &kp MINUS                                                  &kp PERIOD  &kp KP_NUM  &kp KP_EQUAL  &kp KP_DIVIDE  &kp MINUS         &kp MINUS
&kp ESC       &kp ESC       &none       &kp UP      &none      &kp MINUS                                                  &kp PERIOD  &kp N7      &kp N8        &kp N9         &kp LEFT_BRACKET  &kp RIGHT_BRACKET
&kp TAB       &kp TAB       &kp LEFT    &kp DOWN    &kp RIGHT  &none                                                      &kp PRCNT   &kp N4      &kp N5        &kp N6         &kp KP_PLUS       &kp ENTER
&to 0         &trans        &trans      &trans      &trans     &none      &trans  &trans  &to 0   &trans  &trans  &trans  &kp COMMA   &kp N1      &kp N2        &kp N3         &kp KP_MULTIPLY   &to 0
&trans        &trans        &trans      &trans      &trans                &trans  &trans  &trans  &trans  &trans  &trans              &kp N0      &kp LS(N9)    &kp LS(N0)     &kp KP_ENTER      &trans
            >;
        };

        easy_numbers {
            bindings = <
&none   &none             &none             &none                 &none                                                                                          &none       &none       &none       &none       &none
&none   &none             &none             &none                 &none                  &none                                                       &none       &none       &none       &none       &none       &none
&none   &kp NUMBER_1      &kp NUMBER_2      &kp NUMBER_3          &kp NUMBER_4           &kp N5                                                      &kp N6      &kp N7      &kp N8      &kp N9      &kp N0      &none
&none   &kp LS(NUMBER_1)  &kp LS(NUMBER_2)  &kp LS(NUMBER_3)      &kp LS(NUMBER_4)       &kp LS(N5)                                                  &kp LS(N6)  &kp LS(N7)  &kp LS(N8)  &kp LS(N9)  &kp LS(N0)  &none
&trans  &none             &none             &kp LS(LEFT_BRACKET)  &kp LS(RIGHT_BRACKET)  &none       &trans  &trans  &trans  &trans  &trans  &trans  &none       &none       &none       &kp LEFT    &kp RIGHT   &trans
&none   &none             &none             &kp LEFT              &kp RIGHT                          &trans  &trans  &trans  &trans  &trans  &trans              &none       &none       &none       &none       &none
            >;
        };

        magic_layer {
            bindings = <
&bt BT_CLR   &none            &none            &none            &none                                                                                     &none  &none  &none  &none  &bt BT_CLR_ALL
&none        &none            &none            &none            &none            &none                                                             &none  &none  &none  &none  &none  &none
&none        &rgb_ug RGB_SPI  &rgb_ug RGB_SAI  &rgb_ug RGB_HUI  &rgb_ug RGB_BRI  &rgb_ug RGB_TOG                                                   &none  &none  &none  &none  &none  &none
&bootloader  &rgb_ug RGB_SPD  &rgb_ug RGB_SAD  &rgb_ug RGB_HUD  &rgb_ug RGB_BRD  &rgb_ug RGB_EFF                                                   &none  &none  &none  &none  &none  &bootloader
&sys_reset   &none            &none            &none            &none            &none            &bt_2  &bt_3  &none         &none  &none  &none  &none  &none  &none  &none  &none  &sys_reset
&none        &none            &none            &none            &none                             &bt_0  &bt_1  &out OUT_USB  &none  &none  &none         &none  &none  &none  &none  &to 4
            >;
        };

        factory_test_layer {
            bindings = <
&kp N0  &kp N6  &kp N2  &kp N8  &kp N4                                                                  &kp N4  &kp N8  &kp N2  &kp N6  &kp N0
&kp N1  &kp N7  &kp N3  &kp N9  &kp N5  &kp N0                                                  &kp N0  &kp N5  &kp N9  &kp N3  &kp N7  &kp N1
&kp N2  &kp N8  &kp N4  &kp N0  &kp N6  &kp N1                                                  &kp N1  &kp N6  &kp N0  &kp N4  &kp N8  &kp N2
&kp N3  &kp N9  &kp N5  &kp N1  &kp N7  &kp N2                                                  &kp N2  &kp N7  &kp N1  &kp N5  &kp N9  &kp N3
&kp N4  &kp N0  &kp N6  &kp N2  &kp N8  &kp N3  &kp N4  &kp N5  &kp N6  &kp N6  &kp N5  &kp N4  &kp N3  &kp N8  &kp N2  &kp N6  &kp N0  &kp N4
&kp N5  &kp N1  &kp N7  &kp N3  &kp N9          &kp N7  &kp N8  &kp N9  &kp N9  &kp N8  &kp N7          &kp N9  &kp N3  &kp N7  &kp N1  &kp N5
            >;
        };
    };
};
